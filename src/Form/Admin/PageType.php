<?php
/**
 * Created by PhpStorm.
 * User: mark.smith
 * Date: 15/01/2018
 * Time: 21:42
 */

namespace App\Form\Admin;


use App\Form\DataTransformer\TextHeadingType;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\CallbackTransformer;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class PageType extends AbstractType
{
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setRequired('container_interface');

        parent::configureOptions($resolver); // TODO: Change the autogenerated stub
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $panoramicImages = $this->getPanoramicImages($options['container_interface']);
        $builder
            ->add('page_route', \App\Form\Admin\Types\PageRoute::class, [
                'label'   => 'Please select the page to edit',
                'choices' => [
                    'Please select' => '',
                    'Homepage'      => 'home',
                    'Search'        => 'search',
                    'About'         => 'about',
                    'Contact'       => 'contact',
                ],
                'attr'    => [
                    'aria-describedby' => 'page_route_helper',
                ],
            ])
            ->add('page_stage', HiddenType::class, [
                'data' => 'core',
            ])
            ->add('page_type', \App\Form\Admin\Types\PageType::class, [
                'label'   => 'Please select the type of page required',
                'choices' => [
                    'Please select' => '',
                    'Landing page'  => 'landing',
                    'Content page'  => 'content',
                ],
                'attr'    => [
                    'aria-describedby' => 'page_type_helper',
                ],
            ])
            ->add('text_heading_type', CollectionType::class, [
                'entry_type'    => \App\Form\Admin\Types\TextHeadingType::class,
                'allow_add'     => true,
                'allow_delete'  => true,
                'prototype'     => true,
                'entry_options' => [
                    'choices'  => [
                        'Heading 1' => 'h1',
                        'Heading 2' => 'h2',
                        'Heading 3' => 'h3',
                        'Heading 4' => 'h4',
                        'Heading 5' => 'h5',
                    ],
                    'label'    => 'Choose a heading type',
                    'required' => false,
                ],
                'attr'          => array(
                    'class' => 'js--text_heading_type col',
                    'data-form-element-hide' => 'false'
                ),
            ])
            ->add('text_heading_css_class', CollectionType::class, [
                'entry_type'    => \App\Form\Admin\Types\TextHeadingClassType::class,
                'allow_add'     => true,
                'allow_delete'  => true,
                'prototype'     => true,
                'entry_options' => [
                    'choices'  => [
                        'Display 1' => 'display-1',
                        'Display 2' => 'display-2',
                        'Display 3' => 'display-3',
                        'Display 4' => 'display-4',
                        'Display 5' => 'display-5',
                    ],
                    'label'    => 'Choose a heading style',
                    'required' => false,
                ],
                'attr'          => array(
                    'class' => 'js--text_heading_type col',
                    'data-form-element-hide' => 'false'
                ),
            ])
            ->add('text_heading_text_value', CollectionType::class, [
                'entry_type'    => \App\Form\Admin\Types\TextHeadingTextValueType::class,
                'allow_add'     => true,
                'allow_delete'  => true,
                'prototype'     => true,
                'entry_options' => [
                    'label'    => 'Enter text for your heading',
                    'required' => false,
                ],
                'attr'          => array(
                    'class' => 'js--text_heading_type col',
                    'data-form-element-hide' => 'false'
                ),
            ])
            ->add('text_leading', CollectionType::class, [
                'entry_type'    => \App\Form\Admin\Types\TextLeading::class,
                'allow_add'     => true,
                'allow_delete'  => true,
                'prototype'     => true,
                'entry_options' => [
                    'label'    => 'Enter leading text',
                    'required' => false,
                ],
                'attr' => [
                    'data-form-element-hide' => 'false'
                ]
            ])
            ->add('paragraph_text', CollectionType::class, [
                'entry_type'    => \App\Form\Admin\Types\ParagraphText::class,
                'allow_add'     => true,
                'allow_delete'  => true,
                'prototype'     => true,
                'entry_options' => [
                    'label'    => 'Enter text',
                    'required' => false,
                ],
                'attr' => [
                    'data-form-element-hide' => 'false'
                ]

            ])
            ->add('list_group', CollectionType::class, [
                'entry_type'    => \App\Form\Admin\Types\ListGroup::class,
                'allow_add'     => true,
                'allow_delete'  => true,
                'prototype'     => true,
                'entry_options' => [
                    'label'      => 'Add List',
                    'required'   => false,
                    'data_class' => null,
                ],
                'attr'          => [
                    'aria-describedby' => 'list_group_helper',
                    'data-form-element-hide' => 'false'
                ],

            ])
            ->add('panoramic_image', CollectionType::class, [
                'entry_type'    => \App\Form\Admin\Types\PanoramicImage::class,
                'allow_add'     => true,
                'allow_delete'  => true,
                'prototype'     => true,
                'entry_options' => [
                    'label'      => 'Add Panoramic Image',
                    'required'   => false,
                    'data_class' => null,
                    'choices'    => $panoramicImages,
                    'placeholder' => false,
                    'attr'       => [

                    ],
                ],
                'attr'          => [
                    'aria-describedby' => 'panoramic_image_helper',
                    'data-form-element-prefix-markup' => $this->getPanoramicImagesHtml($panoramicImages),
                    'data-form-element-prefix-markup-append-to' => '.form-group',
                    'data-form-element-hide' => 'select'
                ],

            ])
            ->add('display_order', CollectionType::class, [
                'entry_type'     => \App\Form\Admin\Types\DisplayOrder::class,
                'allow_add'      => true,
                'prototype'      => true,
                'prototype_data' => '#NEWCOUNTER#',
                'entry_options'  => [
                ],
            ])
            ->add('submit', SubmitType::class, [
                'label' => 'Next',
                'attr'  => [
                    'class'     => 'btn-success btn-block',
                    'data-role' => "core",
                ],
            ]);

    }

    private function getPanoramicImages(ContainerInterface $container)
    {
        /** @var \App\Utils\Redis $redisService */
        $redisService = $container->get('app.redis');
        $redisClient = $redisService->get();

        /** @var \App\Utils\AwsS3Client $s3Service */
        $s3Service = $container->get('app.aws.s3');
        $s3Client = $s3Service->get();

        $cacheKey = 'aws.s3.listobjects.'.$s3Service->getBucket();
        if ($redisClient->hasItem($cacheKey)) {
            $response = $redisClient->getItem($cacheKey)->get();
        } else {
            $response = $s3Client->listObjects([
                'Bucket' => $s3Service->getBucket(),
            ]);

            $cacheItem = $redisClient->getItem($cacheKey);
            $cacheItem->set($response);

            $redisClient->save($cacheItem);
        }

        $panoImages = [];
        if ($response instanceof \Aws\Result) {
            if (is_iterable($response->get('Contents'))) {
                foreach ($response->get('Contents') as $asset) {
                    if ($this->filterByPath($asset, 'images/pano')) {
                        $panoImages[] = str_replace('images/pano/', '', $asset['Key']);
                    }
                }
            }
        }


        return array_combine($panoImages, $panoImages);
    }

    private function getPanoramicImagesHtml(array $panoImages)
    {
        $html = '<div class="card-deck">';

        foreach ($panoImages as $panoImage) {
            $html .= '<div class="card text-center js--card-pano-image">'.
                '<div class="card-body" style="background-position: center; background-size: cover; background-image: url(https://d3orc742w48r4f.cloudfront.net/images/pano/'. $panoImage .');"></div>' .
                '<div class="card-footer btn-group-toggle" data-toggle="buttons"><label class="btn btn-secondary"><input name="do-not-send[]" type="radio" autocomplete="off" value="'. $panoImage .'" /> Select</label></div>' .
                '</div>';
        }

        $html .= '</div>';

        return $html;
    }

    /**
     * @param array  $asset
     * @param string $pathToMatch
     *
     * @return bool
     */
    private function filterByPath($asset, $pathToMatch)
    {
        if (preg_match('/^\//', $pathToMatch)) {
            throw new \LogicException('Path cannot start with /');
        }

        if (preg_match('/\/$/', $pathToMatch)) {
            throw new \LogicException('Path cannot end with /');
        }

        if (stristr($pathToMatch, '.') !== false) {
            throw new \LogicException('Path cannot include the file');
        }

        if (strpos($asset['Key'], $pathToMatch) === 0 && $asset['Key'] !== $pathToMatch . '/') {
            return (preg_match('/\-(xs|sm|md|lg)\./', $asset['Key']) === 0);
        }
    }
}
